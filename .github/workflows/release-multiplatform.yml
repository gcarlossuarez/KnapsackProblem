name: Build & Release Avalonia (Win/Linux/macOS)

on:
  push:
    tags:
      - 'v*'          # se dispara al pushear un tag tipo v1.0.0
  workflow_dispatch:   # permite lanzarlo manualmente

permissions:
  contents: write  # Permite crear releases y subir archivos

env:
  APP_NAME: KnapsackProblem                    # <-- NOMBRE de tu app (sin espacios)
  PROJECT: KnapsackProblem.csproj  # <-- ruta a tu .csproj
  DOTNET_VERSION: 8.0.x                        # <-- versión .NET

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Publish (win-x64, self-contained, single-file)
        run: dotnet publish ${{ env.PROJECT }} -c Release -r win-x64 --self-contained true -p:PublishSingleFile=true -o publish/win-x64

      - name: Empaquetar ZIP (Windows)
        shell: pwsh
        run: |
          Compress-Archive -Path publish/win-x64\* -DestinationPath ${{ env.APP_NAME }}-win-x64.zip
      - uses: actions/upload-artifact@v4
        with:
          name: windows-zip
          path: ${{ env.APP_NAME }}-win-x64.zip

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Publish (linux-x64, self-contained, single-file)
        run: dotnet publish ${{ env.PROJECT }} -c Release -r linux-x64 --self-contained true -p:PublishSingleFile=true -o publish/linux-x64

      - name: Empaquetar TAR.GZ (Linux)
        run: |
          tar -czf ${{ env.APP_NAME }}-linux-x64.tar.gz -C publish/linux-x64 .
      - uses: actions/upload-artifact@v4
        with:
          name: linux-tar
          path: ${{ env.APP_NAME }}-linux-x64.tar.gz

  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      # Publica para Apple Silicon y Intel. Para .app en macOS, usa UseAppHost=true y NO single-file
      - name: Publish (osx-arm64, self-contained, app host)
        run: dotnet publish ${{ env.PROJECT }} -c Release -r osx-arm64 --self-contained true -p:UseAppHost=true -o publish/osx-arm64

      - name: Debug publish osx-arm64
        run: |
          echo "=== DEBUG: Contenido de publish/osx-arm64 después de publish ==="
          ls -la publish/osx-arm64 || echo "Dir osx-arm64 no encontrado"

      - name: Publish (osx-x64, self-contained, app host)
        run: dotnet publish ${{ env.PROJECT }} -c Release -r osx-x64 --self-contained true -p:UseAppHost=true -o publish/osx-x64

      - name: Debug publish osx-x64
        run: |
          echo "=== DEBUG: Contenido de publish/osx-x64 después de publish ==="
          ls -la publish/osx-x64 || echo "Dir osx-x64 no encontrado"

      # Crea bundle .app para arm64
      - name: Crear .app bundle (osx-arm64)
        run: |
          if [ -d "publish/osx-arm64" ]; then
            cd publish/osx-arm64
            mkdir -p KnapsackProblem.app/Contents/MacOS
            mkdir -p KnapsackProblem.app/Contents/Resources
            
            # Mueve ejecutable y archivos al bundle
            mv KnapsackProblem KnapsackProblem.app/Contents/MacOS/ || echo "Advertencia: KnapsackProblem no encontrado para mover"
            mv *.dylib *.dll *.json *.pdb KnapsackProblem.app/Contents/MacOS/ 2>/dev/null || true
            
            # Info.plist básico (usando literal block para heredoc)
            cat > KnapsackProblem.app/Contents/Info.plist << 'EOF'
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
  <key>CFBundleExecutable</key>
  <string>KnapsackProblem</string>
  <key>CFBundleIdentifier</key>
  <string>com.gcarlossuarez.knapsackproblem</string>
  <key>CFBundleName</key>
  <string>KnapsackProblem</string>
  <key>CFBundleVersion</key>
  <string>1.0</string>
  <key>CFBundleShortVersionString</key>
  <string>1.0</string>
</dict>
</plist>
EOF
            echo "Bundle .app creado para arm64"
          else
            echo "Error: Dir publish/osx-arm64 no existe para crear bundle"
            exit 1
          fi

      # Crea bundle .app para x64
      - name: Crear .app bundle (osx-x64)
        run: |
          if [ -d "publish/osx-x64" ]; then
            cd publish/osx-x64
            mkdir -p KnapsackProblem.app/Contents/MacOS
            mkdir -p KnapsackProblem.app/Contents/Resources
            
            # Mueve ejecutable y archivos al bundle
            mv KnapsackProblem KnapsackProblem.app/Contents/MacOS/ || echo "Advertencia: KnapsackProblem no encontrado para mover"
            mv *.dylib *.dll *.json *.pdb KnapsackProblem.app/Contents/MacOS/ 2>/dev/null || true
            
            # Info.plist básico (usando literal block para heredoc)
            cat > KnapsackProblem.app/Contents/Info.plist << 'EOF'
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
  <key>CFBundleExecutable</key>
  <string>KnapsackProblem</string>
  <key>CFBundleIdentifier</key>
  <string>com.gcarlossuarez.knapsackproblem</string>
  <key>CFBundleName</key>
  <string>KnapsackProblem</string>
  <key>CFBundleVersion</key>
  <string>1.0</string>
  <key>CFBundleShortVersionString</key>
  <string>1.0</string>
</dict>
</plist>
EOF
            echo "Bundle .app creado para x64"
          else
            echo "Error: Dir publish/osx-x64 no existe para crear bundle"
            exit 1
          fi

      # (Opcional) Firma ad-hoc para reducir alertas de Gatekeeper (no sustituye notarización)
      - name: Ad-hoc codesign
        run: |
          if [ -d "publish/osx-arm64/KnapsackProblem.app" ]; then
            codesign --force --deep -s - "publish/osx-arm64/KnapsackProblem.app"
            echo "Codesign completado para arm64 bundle"
          fi
          if [ -d "publish/osx-x64/KnapsackProblem.app" ]; then
            codesign --force --deep -s - "publish/osx-x64/KnapsackProblem.app"
            echo "Codesign completado para x64 bundle"
          fi

      # Empaquetar 4 ZIPs (bundle y flat para cada arch)
      - name: Empaquetar ZIPs (macOS)
        run: |
          # Arm64 bundle
          if [ -d "publish/osx-arm64/KnapsackProblem.app" ]; then
            cd publish/osx-arm64
            zip -r ../../${{ env.APP_NAME }}-osx-arm64-bundle.zip "KnapsackProblem.app"
            echo "ZIP bundle arm64 creado"
          else
            echo "Advertencia: No se encontró bundle arm64, saltando ZIP bundle"
          fi
          
          # Arm64 flat (siempre, ya que funciona)
          if [ -d "publish/osx-arm64" ]; then
            cd publish/osx-arm64
            zip -r ../../${{ env.APP_NAME }}-osx-arm64-flat.zip .
            echo "ZIP flat arm64 creado"
          else
            echo "Error: Dir publish/osx-arm64 no existe para flat"
            exit 1
          fi
          
          # x64 bundle
          if [ -d "publish/osx-x64/KnapsackProblem.app" ]; then
            cd publish/osx-x64
            zip -r ../../${{ env.APP_NAME }}-osx-x64-bundle.zip "KnapsackProblem.app"
            echo "ZIP bundle x64 creado"
          else
            echo "Advertencia: No se encontró bundle x64, saltando ZIP bundle"
          fi
          
          # x64 flat
          if [ -d "publish/osx-x64" ]; then
            cd publish/osx-x64
            zip -r ../../${{ env.APP_NAME }}-osx-x64-flat.zip .
            echo "ZIP flat x64 creado"
          else
            echo "Error: Dir publish/osx-x64 no existe para flat"
            exit 1
          fi

      - uses: actions/upload-artifact@v4
        with:
          name: macos-zips
          path: |
            ${{ env.APP_NAME }}-osx-arm64-bundle.zip
            ${{ env.APP_NAME }}-osx-arm64-flat.zip
            ${{ env.APP_NAME }}-osx-x64-bundle.zip
            ${{ env.APP_NAME }}-osx-x64-flat.zip

      # STEP AJUSTADO PARA .APP BUNDLE Y TEST HEADLESS
      - name: Ejecutar y probar app en macOS (arm64 flat)
        run: |
          # Debug: Lista el contenido del dir para ver la estructura real
          echo "=== DEBUG: Contenido de publish/osx-arm64 ==="
          ls -la publish/osx-arm64
          
          cd publish/osx-arm64
          
          # Chequea si hay .app (por si acaso)
          if [ -d "KnapsackProblem.app" ]; then
            echo "=== Encontrado .app bundle, ejecutando desde Contents/MacOS ==="
            cd "KnapsackProblem.app/Contents/MacOS"
            ls -la  # Debug
            timeout 10s ./KnapsackProblem || true
          else
            echo "=== No .app bundle, ejecutando directo ==="
            # Chequea directo el ejecutable conocido (más simple y macOS-friendly)
            if [ -x "./KnapsackProblem" ]; then
              echo "Ejecutable encontrado: ./KnapsackProblem"
              timeout 10s ./KnapsackProblem || true
            else
              echo "=== ERROR: No se encontró ./KnapsackProblem ==="
              ls -la  # Lista extra
              exit 1
            fi
          fi
          
          # Chequea resultado
          EXIT_CODE=$?
          echo "=== Exit code: $EXIT_CODE ==="
          if [ $EXIT_CODE -eq 0 ] || [ $EXIT_CODE -eq 124 ] || [ $EXIT_CODE -eq 143 ]; then
            echo "¡ÉXITO: App arrancó sin crash (timeout por GUI es esperado en Actions headless)!"
          else
            echo "FALLO: Error en ejecución (código $EXIT_CODE). Revisa logs arriba."
            exit 1
          fi

  release:
    runs-on: ubuntu-latest
    needs: [build-windows, build-linux, build-macos]
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: ./dist

      - name: Mostrar artefactos
        run: ls -R ./dist

      - name: Crear Release en GitHub
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/windows-zip/${{ env.APP_NAME }}-win-x64.zip
            dist/linux-tar/${{ env.APP_NAME }}-linux-x64.tar.gz
            dist/macos-zips/${{ env.APP_NAME }}-osx-arm64.zip
            dist/macos-zips/${{ env.APP_NAME }}-osx-x64.zip
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

          
