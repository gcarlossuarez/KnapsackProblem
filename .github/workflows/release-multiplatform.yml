name: Build & Release Avalonia (Win/Linux/macOS)

on:
  push:
    tags:
      - 'v*'          # se dispara al pushear un tag tipo v1.0.0
  workflow_dispatch:   # permite lanzarlo manualmente

permissions:  # <-- ¡AGREGA ESTO!
  contents: write  # Permite crear releases y subir archivos

env:
  APP_NAME: KnapsackProblem                    # <-- NOMBRE de tu app (sin espacios)
  PROJECT: KnapsackProblem.csproj  # <-- ruta a tu .csproj
  DOTNET_VERSION: 8.0.x                        # <-- versión .NET

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Publish (win-x64, self-contained, single-file)
        run: dotnet publish ${{ env.PROJECT }} -c Release -r win-x64 --self-contained true -p:PublishSingleFile=true -o publish/win-x64

      - name: Empaquetar ZIP (Windows)
        shell: pwsh
        run: |
          Compress-Archive -Path publish/win-x64\* -DestinationPath ${{ env.APP_NAME }}-win-x64.zip
      - uses: actions/upload-artifact@v4
        with:
          name: windows-zip
          path: ${{ env.APP_NAME }}-win-x64.zip

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Publish (linux-x64, self-contained, single-file)
        run: dotnet publish ${{ env.PROJECT }} -c Release -r linux-x64 --self-contained true -p:PublishSingleFile=true -o publish/linux-x64

      - name: Empaquetar TAR.GZ (Linux)
        run: |
          tar -czf ${{ env.APP_NAME }}-linux-x64.tar.gz -C publish/linux-x64 .
      - uses: actions/upload-artifact@v4
        with:
          name: linux-tar
          path: ${{ env.APP_NAME }}-linux-x64.tar.gz

  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      # Publica versión flat (sin .app bundle) para Apple Silicon e Intel: self-contained, single-file
      - name: Publish (osx-arm64, self-contained, single-file flat)
        run: dotnet publish ${{ env.PROJECT }} -c Release -r osx-arm64 --self-contained true -p:PublishSingleFile=true -o publish/osx-arm64

      - name: Publish (osx-x64, self-contained, single-file flat)
        run: dotnet publish ${{ env.PROJECT }} -c Release -r osx-x64 --self-contained true -p:PublishSingleFile=true -o publish/osx-x64

      # Firma ad-hoc del ejecutable flat (reduce alertas de Gatekeeper)
      - name: Ad-hoc codesign (flat executable)
        run: |
          if [ -f "publish/osx-arm64/${{ env.APP_NAME }}" ]; then
            codesign --force --deep -s - "publish/osx-arm64/${{ env.APP_NAME }}"
          fi
          if [ -f "publish/osx-x64/${{ env.APP_NAME }}" ]; then
            codesign --force --deep -s - "publish/osx-x64/${{ env.APP_NAME }}"
          fi

      - name: Empaquetar ZIPs (macOS flat)
        run: |
          (cd publish/osx-arm64 && zip -r ../../${{ env.APP_NAME }}-osx-arm64.zip .)
          (cd publish/osx-x64 && zip -r ../../${{ env.APP_NAME }}-osx-x64.zip .)

      - uses: actions/upload-artifact@v4
        with:
          name: macos-zips
          path: |
            ${{ env.APP_NAME }}-osx-arm64.zip
            ${{ env.APP_NAME }}-osx-x64.zip

      # Test ajustado para versión flat (ejecutable directo)
      - name: Ejecutar y probar app en macOS (arm64, flat)
        run: |
          # Debug: Lista el contenido del dir para ver la estructura real
          echo "=== DEBUG: Contenido de publish/osx-arm64 ==="
          ls -la publish/osx-arm64
          
          cd publish/osx-arm64
          
          # Para flat, siempre ejecuta el ejecutable directo
          echo "=== Ejecutando versión flat ==="
          if [ -x "./${{ env.APP_NAME }}" ]; then
            echo "Ejecutable encontrado: ./KnapsackProblem"
            timeout 10s ./${{ env.APP_NAME }} || true
          else
            echo "=== ERROR: No se encontró ./${{ env.APP_NAME }} ==="
            ls -la  # Lista extra
            exit 1
          fi
          
          # Chequea resultado
          EXIT_CODE=$?
          echo "=== Exit code: $EXIT_CODE ==="
          if [ $EXIT_CODE -eq 0 ] || [ $EXIT_CODE -eq 124 ] || [ $EXIT_CODE -eq 143 ]; then
            echo "¡ÉXITO: App arrancó sin crash (timeout por GUI es esperado en Actions headless)!"
          else
            echo "FALLO: Error en ejecución (código $EXIT_CODE). Revisa logs arriba."
            exit 1
          fi

  release:
    runs-on: ubuntu-latest
    needs: [build-windows, build-linux, build-macos]
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: ./dist

      - name: Mostrar artefactos
        run: ls -R ./dist

      - name: Crear Release en GitHub
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/windows-zip/${{ env.APP_NAME }}-win-x64.zip
            dist/linux-tar/${{ env.APP_NAME }}-linux-x64.tar.gz
            dist/macos-zips/${{ env.APP_NAME }}-osx-arm64.zip
            dist/macos-zips/${{ env.APP_NAME }}-osx-x64.zip
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
